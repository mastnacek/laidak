import 'dart:io' show Platform;
import 'dart:typed_data';
import 'package:flutter/services.dart';
import '../utils/app_logger.dart';

/// Platform Channel pro Storage Access Framework (Android)
///
/// Umo≈æ≈àuje z√°pis soubor≈Ø do user-selected slo≈æky p≈ôes SAF na Androidu.
/// Na ostatn√≠ch platform√°ch (Windows, Linux, macOS) se pou≈æ√≠v√° dart:io File API.
class SafFileWriter {
  static const MethodChannel _channel = MethodChannel('com.todo.markdown_export/saf');

  /// Zap√≠≈°e soubor p≈ôes SAF (Android) nebo dart:io (ostatn√≠ platformy)
  ///
  /// [directoryUri] - SAF tree URI (na Androidu) nebo file path (ostatn√≠ platformy)
  /// [relativePath] - relativn√≠ cesta od directoryUri (nap≈ô. "tasks/todo.md")
  /// [content] - obsah souboru jako bytes
  /// [mimeType] - MIME type (default: "text/markdown")
  ///
  /// Throws [PlatformException] pokud sel≈æe z√°pis
  static Future<void> writeFile({
    required String directoryUri,
    required String relativePath,
    required Uint8List content,
    String mimeType = 'text/markdown',
  }) async {
    try {
      if (Platform.isAndroid) {
        // Android: pou≈æij SAF p≈ôes Platform Channel
        AppLogger.debug('üì± Android: Zapisuji soubor p≈ôes SAF: $relativePath');

        final result = await _channel.invokeMethod<bool>('writeFile', {
          'directoryUri': directoryUri,
          'relativePath': relativePath,
          'content': content,
          'mimeType': mimeType,
        });

        if (result != true) {
          throw Exception('SAF write failed - native method returned false');
        }

        AppLogger.debug('‚úÖ Android: Soubor zaps√°n: $relativePath');
      } else {
        // Desktop: tento p≈ô√≠pad by nemƒõl nastat (file_picker vrac√≠ norm√°ln√≠ path)
        throw UnsupportedError(
          'SafFileWriter.writeFile() je urƒçen pouze pro Android. '
          'Na desktopu pou≈æij dart:io File API p≈ô√≠mo.',
        );
      }
    } on PlatformException catch (e) {
      AppLogger.error('‚ùå SAF write failed: ${e.message}');
      throw Exception('SAF write failed: ${e.message}');
    } catch (e) {
      AppLogger.error('‚ùå Unexpected error in SafFileWriter: $e');
      rethrow;
    }
  }

  /// Sma≈æe slo≈æku p≈ôes SAF (Android)
  ///
  /// [directoryUri] - SAF tree URI
  /// [relativePath] - relativn√≠ cesta ke slo≈æce (nap≈ô. "tasks")
  ///
  /// Throws [PlatformException] pokud sel≈æe maz√°n√≠
  static Future<void> deleteDirectory({
    required String directoryUri,
    required String relativePath,
  }) async {
    try {
      if (Platform.isAndroid) {
        AppLogger.debug('üì± Android: Ma≈æu slo≈æku p≈ôes SAF: $relativePath');

        final result = await _channel.invokeMethod<bool>('deleteDirectory', {
          'directoryUri': directoryUri,
          'relativePath': relativePath,
        });

        if (result != true) {
          AppLogger.debug('‚ö†Ô∏è Slo≈æka neexistuje nebo u≈æ byla smaz√°na: $relativePath');
        } else {
          AppLogger.debug('‚úÖ Android: Slo≈æka smaz√°na: $relativePath');
        }
      } else {
        throw UnsupportedError(
          'SafFileWriter.deleteDirectory() je urƒçen pouze pro Android.',
        );
      }
    } on PlatformException catch (e) {
      AppLogger.error('‚ùå SAF delete failed: ${e.message}');
      throw Exception('SAF delete failed: ${e.message}');
    }
  }

  /// Kontrola jestli je cesta SAF URI (Android content://)
  static bool isSafUri(String path) {
    return path.startsWith('content://');
  }
}
