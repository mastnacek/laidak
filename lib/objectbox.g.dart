// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/services/vector_store/entities/note_embedding.dart';
import 'core/services/vector_store/entities/todo_embedding.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 4055643067187840678),
    name: 'NoteEmbedding',
    lastPropertyId: const obx_int.IdUid(7, 479865199194582066),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7167902647614530586),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6345209635127478301),
        name: 'noteId',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(1, 3083595143307448835),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8865132640454939850),
        name: 'embedding',
        type: 28,
        flags: 8,
        indexId: const obx_int.IdUid(2, 3526767439226554136),
        hnswParams: obx_int.ModelHnswParams(dimensions: 384, distanceType: 2),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8211942522805459572),
        name: 'isFavourite',
        type: 1,
        flags: 8,
        indexId: const obx_int.IdUid(3, 309855197730275207),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 186055134816275184),
        name: 'textPreview',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4358313731592851364),
        name: 'modelName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 479865199194582066),
        name: 'embeddedAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 5274882023371438436),
    name: 'TodoEmbedding',
    lastPropertyId: const obx_int.IdUid(8, 2765425146138238472),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2846122796511455956),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 9085020012482179747),
        name: 'todoId',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(4, 6413302683161180022),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1066323295260213360),
        name: 'embedding',
        type: 28,
        flags: 8,
        indexId: const obx_int.IdUid(5, 335186670791556605),
        hnswParams: obx_int.ModelHnswParams(dimensions: 384, distanceType: 2),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6836089740832269629),
        name: 'status',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(6, 5034459071464012073),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7999899262539443025),
        name: 'priority',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(7, 200346845527871602),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4174696970621306867),
        name: 'textPreview',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1250532131027719093),
        name: 'modelName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 2765425146138238472),
        name: 'embeddedAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 5274882023371438436),
    lastIndexId: const obx_int.IdUid(7, 200346845527871602),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    NoteEmbedding: obx_int.EntityDefinition<NoteEmbedding>(
      model: _entities[0],
      toOneRelations: (NoteEmbedding object) => [],
      toManyRelations: (NoteEmbedding object) => {},
      getId: (NoteEmbedding object) => object.id,
      setId: (NoteEmbedding object, int id) {
        object.id = id;
      },
      objectToFB: (NoteEmbedding object, fb.Builder fbb) {
        final embeddingOffset = fbb.writeListFloat32(object.embedding);
        final textPreviewOffset = fbb.writeString(object.textPreview);
        final modelNameOffset = fbb.writeString(object.modelName);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.noteId);
        fbb.addOffset(2, embeddingOffset);
        fbb.addBool(3, object.isFavourite);
        fbb.addOffset(4, textPreviewOffset);
        fbb.addOffset(5, modelNameOffset);
        fbb.addInt64(6, object.embeddedAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final noteIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final embeddingParam = const fb.ListReader<double>(
          fb.Float32Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final isFavouriteParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final textPreviewParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final modelNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final embeddedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final object = NoteEmbedding(
          noteId: noteIdParam,
          embedding: embeddingParam,
          isFavourite: isFavouriteParam,
          textPreview: textPreviewParam,
          modelName: modelNameParam,
          embeddedAt: embeddedAtParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    TodoEmbedding: obx_int.EntityDefinition<TodoEmbedding>(
      model: _entities[1],
      toOneRelations: (TodoEmbedding object) => [],
      toManyRelations: (TodoEmbedding object) => {},
      getId: (TodoEmbedding object) => object.id,
      setId: (TodoEmbedding object, int id) {
        object.id = id;
      },
      objectToFB: (TodoEmbedding object, fb.Builder fbb) {
        final embeddingOffset = fbb.writeListFloat32(object.embedding);
        final statusOffset = fbb.writeString(object.status);
        final priorityOffset = object.priority == null
            ? null
            : fbb.writeString(object.priority!);
        final textPreviewOffset = fbb.writeString(object.textPreview);
        final modelNameOffset = fbb.writeString(object.modelName);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.todoId);
        fbb.addOffset(2, embeddingOffset);
        fbb.addOffset(3, statusOffset);
        fbb.addOffset(4, priorityOffset);
        fbb.addOffset(5, textPreviewOffset);
        fbb.addOffset(6, modelNameOffset);
        fbb.addInt64(7, object.embeddedAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final todoIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final embeddingParam = const fb.ListReader<double>(
          fb.Float32Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final priorityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final textPreviewParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final modelNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final embeddedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
        );
        final object = TodoEmbedding(
          todoId: todoIdParam,
          embedding: embeddingParam,
          status: statusParam,
          priority: priorityParam,
          textPreview: textPreviewParam,
          modelName: modelNameParam,
          embeddedAt: embeddedAtParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [NoteEmbedding] entity fields to define ObjectBox queries.
class NoteEmbedding_ {
  /// See [NoteEmbedding.id].
  static final id = obx.QueryIntegerProperty<NoteEmbedding>(
    _entities[0].properties[0],
  );

  /// See [NoteEmbedding.noteId].
  static final noteId = obx.QueryIntegerProperty<NoteEmbedding>(
    _entities[0].properties[1],
  );

  /// See [NoteEmbedding.embedding].
  static final embedding = obx.QueryHnswProperty<NoteEmbedding>(
    _entities[0].properties[2],
  );

  /// See [NoteEmbedding.isFavourite].
  static final isFavourite = obx.QueryBooleanProperty<NoteEmbedding>(
    _entities[0].properties[3],
  );

  /// See [NoteEmbedding.textPreview].
  static final textPreview = obx.QueryStringProperty<NoteEmbedding>(
    _entities[0].properties[4],
  );

  /// See [NoteEmbedding.modelName].
  static final modelName = obx.QueryStringProperty<NoteEmbedding>(
    _entities[0].properties[5],
  );

  /// See [NoteEmbedding.embeddedAt].
  static final embeddedAt = obx.QueryDateProperty<NoteEmbedding>(
    _entities[0].properties[6],
  );
}

/// [TodoEmbedding] entity fields to define ObjectBox queries.
class TodoEmbedding_ {
  /// See [TodoEmbedding.id].
  static final id = obx.QueryIntegerProperty<TodoEmbedding>(
    _entities[1].properties[0],
  );

  /// See [TodoEmbedding.todoId].
  static final todoId = obx.QueryIntegerProperty<TodoEmbedding>(
    _entities[1].properties[1],
  );

  /// See [TodoEmbedding.embedding].
  static final embedding = obx.QueryHnswProperty<TodoEmbedding>(
    _entities[1].properties[2],
  );

  /// See [TodoEmbedding.status].
  static final status = obx.QueryStringProperty<TodoEmbedding>(
    _entities[1].properties[3],
  );

  /// See [TodoEmbedding.priority].
  static final priority = obx.QueryStringProperty<TodoEmbedding>(
    _entities[1].properties[4],
  );

  /// See [TodoEmbedding.textPreview].
  static final textPreview = obx.QueryStringProperty<TodoEmbedding>(
    _entities[1].properties[5],
  );

  /// See [TodoEmbedding.modelName].
  static final modelName = obx.QueryStringProperty<TodoEmbedding>(
    _entities[1].properties[6],
  );

  /// See [TodoEmbedding.embeddedAt].
  static final embeddedAt = obx.QueryDateProperty<TodoEmbedding>(
    _entities[1].properties[7],
  );
}
