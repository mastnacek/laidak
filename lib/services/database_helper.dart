import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import '../models/todo_item.dart';

/// Singleton slu≈æba pro spr√°vu SQLite datab√°ze
class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  static Database? _database;

  factory DatabaseHelper() => _instance;

  DatabaseHelper._internal();

  /// Z√≠skat datab√°zovou instanci (lazy initialization)
  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  /// Inicializovat datab√°zi
  Future<Database> _initDatabase() async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, 'todo.db');

    return await openDatabase(
      path,
      version: 4,
      onCreate: _onCreate,
      onUpgrade: _onUpgrade,
    );
  }

  /// Vytvo≈ôit tabulky p≈ôi prvn√≠ inicializaci
  Future<void> _onCreate(Database db, int version) async {
    // Tabulka √∫kol≈Ø
    await db.execute('''
      CREATE TABLE todos (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        task TEXT NOT NULL,
        isCompleted INTEGER NOT NULL DEFAULT 0,
        createdAt TEXT NOT NULL,
        priority TEXT,
        dueDate TEXT,
        action TEXT,
        tags TEXT
      )
    ''');

    // Tabulka AI nastaven√≠ + nastaven√≠ tag≈Ø
    await db.execute('''
      CREATE TABLE settings (
        id INTEGER PRIMARY KEY CHECK (id = 1),
        api_key TEXT,
        model TEXT NOT NULL DEFAULT 'mistralai/mistral-medium-3.1',
        temperature REAL NOT NULL DEFAULT 1.0,
        max_tokens INTEGER NOT NULL DEFAULT 1000,
        enabled INTEGER NOT NULL DEFAULT 1,
        tag_delimiter_start TEXT NOT NULL DEFAULT '*',
        tag_delimiter_end TEXT NOT NULL DEFAULT '*'
      )
    ''');

    // Tabulka custom prompt≈Ø pro motivaci
    await db.execute('''
      CREATE TABLE custom_prompts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        category TEXT NOT NULL UNIQUE,
        system_prompt TEXT NOT NULL,
        tags TEXT NOT NULL,
        style TEXT NOT NULL
      )
    ''');

    // Tabulka definic tag≈Ø (syst√©mov√© tagy konfigurovateln√© u≈æivatelem)
    await db.execute('''
      CREATE TABLE tag_definitions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        tag_name TEXT UNIQUE NOT NULL,
        tag_type TEXT NOT NULL,
        display_name TEXT,
        emoji TEXT,
        color TEXT,
        sort_order INTEGER NOT NULL DEFAULT 0,
        enabled INTEGER NOT NULL DEFAULT 1
      )
    ''');

    // Vlo≈æit v√Ωchoz√≠ nastaven√≠
    await _insertDefaultSettings(db);
    await _insertDefaultPrompts(db);
    await _insertDefaultTagDefinitions(db);
  }

  /// Upgrade datab√°ze na novou verzi
  Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {
    if (oldVersion < 2) {
      // P≈ôidat tabulky pro AI nastaven√≠ a prompty
      await db.execute('''
        CREATE TABLE IF NOT EXISTS settings (
          id INTEGER PRIMARY KEY CHECK (id = 1),
          api_key TEXT,
          model TEXT NOT NULL DEFAULT 'mistralai/mistral-medium-3.1',
          temperature REAL NOT NULL DEFAULT 1.0,
          max_tokens INTEGER NOT NULL DEFAULT 1000,
          enabled INTEGER NOT NULL DEFAULT 1
        )
      ''');

      await db.execute('''
        CREATE TABLE IF NOT EXISTS custom_prompts (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          category TEXT NOT NULL UNIQUE,
          system_prompt TEXT NOT NULL,
          tags TEXT NOT NULL,
          style TEXT NOT NULL
        )
      ''');

      await _insertDefaultSettings(db);
      await _insertDefaultPrompts(db);
    }

    if (oldVersion < 3) {
      // P≈ôidat tabulku pro definice tag≈Ø
      await db.execute('''
        CREATE TABLE IF NOT EXISTS tag_definitions (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          tag_name TEXT UNIQUE NOT NULL,
          tag_type TEXT NOT NULL,
          display_name TEXT,
          emoji TEXT,
          color TEXT,
          sort_order INTEGER NOT NULL DEFAULT 0,
          enabled INTEGER NOT NULL DEFAULT 1
        )
      ''');

      await _insertDefaultTagDefinitions(db);
    }

    if (oldVersion < 4) {
      // P≈ôidat sloupce pro nastaven√≠ oddƒõlovaƒç≈Ø tag≈Ø
      await db.execute('''
        ALTER TABLE settings ADD COLUMN tag_delimiter_start TEXT NOT NULL DEFAULT '*'
      ''');

      await db.execute('''
        ALTER TABLE settings ADD COLUMN tag_delimiter_end TEXT NOT NULL DEFAULT '*'
      ''');
    }
  }

  /// Vlo≈æit v√Ωchoz√≠ AI nastaven√≠
  Future<void> _insertDefaultSettings(Database db) async {
    await db.insert('settings', {
      'id': 1,
      'api_key': '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',
      'model': 'mistralai/mistral-medium-3.1',
      'temperature': 1.0,
      'max_tokens': 1000,
      'enabled': 1,
      'tag_delimiter_start': '*',
      'tag_delimiter_end': '*',
    });
  }

  /// Vlo≈æit v√Ωchoz√≠ motivaƒçn√≠ prompty
  Future<void> _insertDefaultPrompts(Database db) async {
    // Prompt pro pr√°ci
    await db.insert('custom_prompts', {
      'category': 'pr√°ce',
      'system_prompt': 'Jsi m≈Øj ≈°√©f Zdenƒõk a j√° jsem Jarda tv≈Øj pod≈ô√≠zen√Ω. Jse≈° na mƒõ u≈æ pƒõknƒõ nasranej, proto≈æe mƒõ v≈°echno dlouho trv√°, ale buƒè pozitivn√≠ a moc nevys√≠rej a popo≈æe≈à mƒõ nƒõjakou motivac√≠. Odpov√≠dej POUZE v ƒçe≈°tinƒõ. Nepiju pivo!',
      'tags': '["pr√°ce","work","job","office","projekt","meeting"]',
      'style': 'profesion√°ln√≠ a asertivn√≠',
    });

    // Prompt pro domov
    await db.insert('custom_prompts', {
      'category': 'domov',
      'system_prompt': 'ROLE: Jsi moje man≈æelka Lenka, kter√° m√° obrovsk√° prsa a velk√Ω macat√Ω zadek - j√° jsem tv≈Øj man≈æel Jaroslav a tyhle tvoje proporce miluji. Motivuj mƒõ k dokonƒçen√≠ √∫kol≈Ø s d≈Ørazem na rodinn√© hodnoty a pohodl√≠ domova. Buƒè vl√≠dn√° a podporuj√≠c√≠, pou≈æij svoje p≈ôednosti a vnady k motivaci sexem (vym√Ω≈°lej r≈Øzn√© variace na moje obl√≠ben√© polohy a praktiky), proto≈æe jsem chorobn√Ω prokrastin√°tor - odkladaƒç. M√°m r√°d titfuck mezi tv√° obrovsk√° prsa a r√°d na nƒõ st≈ô√≠k√°m semeno!!! Taky tƒõ r√°d ≈°uk√°m zezadu kdy vid√≠m tv≈Øj obrovsk√Ω zadek a kozy! Kdy≈æ tƒõ ≈°uk√°m zezadu, l√≠b√≠ se mƒõ, jak jsou kozy rozvalen√© do stran. Nebo kdy≈æ jse≈° v pozici naho≈ôe a tvoje kozy m√°m v obliƒçeji!!! Buƒè kreativn√≠ v motivov√°n√≠. Oslovuj mƒõ p≈ô√≠mo a eroticky a lechtivƒõ. Pou≈æ√≠vej emoji pro zv√Ωraznƒõn√≠. Vra≈• maxim√°lne 20 vƒõt a minim√°lnƒõ 10.',
      'tags': '["domov","doma","rodina","family","home"]',
      'style': 'rodinn√Ω a vl√≠dn√Ω',
    });
  }

  /// Vlo≈æit v√Ωchoz√≠ definice tag≈Ø (podle Tauri verze + roz≈°√≠≈ôen√≠)
  Future<void> _insertDefaultTagDefinitions(Database db) async {
    // Priority tagy
    await db.insert('tag_definitions', {
      'tag_name': 'a',
      'tag_type': 'priority',
      'display_name': 'Vysok√° priorita',
      'emoji': 'üî¥',
      'color': '#ff0000',
      'sort_order': 1,
      'enabled': 1,
    });

    await db.insert('tag_definitions', {
      'tag_name': 'b',
      'tag_type': 'priority',
      'display_name': 'St≈ôedn√≠ priorita',
      'emoji': 'üü°',
      'color': '#ffaa00',
      'sort_order': 2,
      'enabled': 1,
    });

    await db.insert('tag_definitions', {
      'tag_name': 'c',
      'tag_type': 'priority',
      'display_name': 'N√≠zk√° priorita',
      'emoji': 'üü¢',
      'color': '#00ff00',
      'sort_order': 3,
      'enabled': 1,
    });

    // ƒåasov√©/deadline tagy
    await db.insert('tag_definitions', {
      'tag_name': 'dnes',
      'tag_type': 'date',
      'display_name': 'Dnes',
      'emoji': '‚è∞',
      'color': '#ff0000',
      'sort_order': 1,
      'enabled': 1,
    });

    await db.insert('tag_definitions', {
      'tag_name': 'zitra',
      'tag_type': 'date',
      'display_name': 'Z√≠tra',
      'emoji': 'üìÖ',
      'color': '#ffaa00',
      'sort_order': 2,
      'enabled': 1,
    });

    await db.insert('tag_definitions', {
      'tag_name': 'zatyden',
      'tag_type': 'date',
      'display_name': 'Za t√Ωden',
      'emoji': 'üìÜ',
      'color': '#00aaff',
      'sort_order': 3,
      'enabled': 1,
    });

    await db.insert('tag_definitions', {
      'tag_name': 'zamesic',
      'tag_type': 'date',
      'display_name': 'Za mƒõs√≠c',
      'emoji': 'üìÜ',
      'color': '#0088ff',
      'sort_order': 4,
      'enabled': 1,
    });

    await db.insert('tag_definitions', {
      'tag_name': 'zarok',
      'tag_type': 'date',
      'display_name': 'Za rok',
      'emoji': 'üìÜ',
      'color': '#0066ff',
      'sort_order': 5,
      'enabled': 1,
    });

    // Akƒçn√≠ tagy
    final actions = [
      {'name': 'udelat', 'display': 'Udƒõlat', 'emoji': '‚úÖ'},
      {'name': 'zavolat', 'display': 'Zavolat', 'emoji': 'üìû'},
      {'name': 'napsat', 'display': 'Napsat', 'emoji': '‚úçÔ∏è'},
      {'name': 'koupit', 'display': 'Koupit', 'emoji': 'üõí'},
      {'name': 'poslat', 'display': 'Poslat', 'emoji': 'üì§'},
      {'name': 'pripravit', 'display': 'P≈ôipravit', 'emoji': 'üîß'},
      {'name': 'domluvit', 'display': 'Domluvit', 'emoji': 'ü§ù'},
      {'name': 'zkontrolovat', 'display': 'Zkontrolovat', 'emoji': 'üîç'},
      {'name': 'opravit', 'display': 'Opravit', 'emoji': 'üî®'},
      {'name': 'nacist', 'display': 'Naƒç√≠st', 'emoji': 'üìñ'},
      {'name': 'poslouchat', 'display': 'Poslouchat', 'emoji': 'üéß'},
    ];

    int actionOrder = 1;
    for (final action in actions) {
      await db.insert('tag_definitions', {
        'tag_name': action['name'],
        'tag_type': 'action',
        'display_name': action['display'],
        'emoji': action['emoji'],
        'color': '#00ffff',
        'sort_order': actionOrder++,
        'enabled': 1,
      });
    }

    // Status tagy
    await db.insert('tag_definitions', {
      'tag_name': 'hotove',
      'tag_type': 'status',
      'display_name': 'Hotov√©',
      'emoji': '‚úÖ',
      'color': '#00ff00',
      'sort_order': 1,
      'enabled': 1,
    });

    await db.insert('tag_definitions', {
      'tag_name': 'todo',
      'tag_type': 'status',
      'display_name': 'K dokonƒçen√≠',
      'emoji': 'üìù',
      'color': '#ffaa00',
      'sort_order': 2,
      'enabled': 1,
    });
  }

  /// P≈ôidat nov√Ω TODO √∫kol
  Future<TodoItem> insertTodo(TodoItem todo) async {
    final db = await database;
    final id = await db.insert('todos', todo.toMap());
    return todo.copyWith(id: id);
  }

  /// Z√≠skat v≈°echny TODO √∫koly
  Future<List<TodoItem>> getAllTodos() async {
    final db = await database;
    final maps = await db.query('todos', orderBy: 'createdAt DESC');
    return maps.map((map) => TodoItem.fromMap(map)).toList();
  }

  /// Aktualizovat TODO √∫kol
  Future<int> updateTodo(TodoItem todo) async {
    final db = await database;
    return await db.update(
      'todos',
      todo.toMap(),
      where: 'id = ?',
      whereArgs: [todo.id],
    );
  }

  /// Smazat TODO √∫kol
  Future<int> deleteTodo(int id) async {
    final db = await database;
    return await db.delete(
      'todos',
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  /// Oznaƒçit √∫kol jako hotov√Ω/nehotov√Ω
  Future<int> toggleTodoStatus(int id, bool isCompleted) async {
    final db = await database;
    return await db.update(
      'todos',
      {'isCompleted': isCompleted ? 1 : 0},
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  /// Zav≈ô√≠t datab√°zi
  Future<void> close() async {
    final db = await database;
    await db.close();
  }

  /// Z√≠skat AI nastaven√≠
  Future<Map<String, dynamic>> getSettings() async {
    final db = await database;
    final result = await db.query('settings', where: 'id = ?', whereArgs: [1]);

    if (result.isEmpty) {
      // Pokud neexistuje, vr√°tit v√Ωchoz√≠ hodnoty
      return {
        'api_key': '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',
        'model': 'mistralai/mistral-medium-3.1',
        'temperature': 1.0,
        'max_tokens': 1000,
        'enabled': 1,
        'tag_delimiter_start': '*',
        'tag_delimiter_end': '*',
      };
    }

    return result.first;
  }

  /// Aktualizovat AI nastaven√≠
  Future<void> updateSettings({
    String? apiKey,
    String? model,
    double? temperature,
    int? maxTokens,
    bool? enabled,
    String? tagDelimiterStart,
    String? tagDelimiterEnd,
  }) async {
    final db = await database;

    // Naƒç√≠st souƒçasn√° nastaven√≠
    final current = await getSettings();

    // P≈ôipravit data k update
    final updateData = <String, dynamic>{};
    if (apiKey != null) updateData['api_key'] = apiKey;
    if (model != null) updateData['model'] = model;
    if (temperature != null) updateData['temperature'] = temperature;
    if (maxTokens != null) updateData['max_tokens'] = maxTokens;
    if (enabled != null) updateData['enabled'] = enabled ? 1 : 0;
    if (tagDelimiterStart != null) updateData['tag_delimiter_start'] = tagDelimiterStart;
    if (tagDelimiterEnd != null) updateData['tag_delimiter_end'] = tagDelimiterEnd;

    if (updateData.isEmpty) return;

    // Update nebo insert
    final result = await db.query('settings', where: 'id = ?', whereArgs: [1]);
    if (result.isEmpty) {
      await db.insert('settings', {
        'id': 1,
        'api_key': apiKey ?? current['api_key'],
        'model': model ?? current['model'],
        'temperature': temperature ?? current['temperature'],
        'max_tokens': maxTokens ?? current['max_tokens'],
        'enabled': (enabled ?? (current['enabled'] == 1)) ? 1 : 0,
        'tag_delimiter_start': tagDelimiterStart ?? current['tag_delimiter_start'],
        'tag_delimiter_end': tagDelimiterEnd ?? current['tag_delimiter_end'],
      });
    } else {
      await db.update(
        'settings',
        updateData,
        where: 'id = ?',
        whereArgs: [1],
      );
    }
  }

  /// Naƒç√≠st v≈°echny custom prompty
  Future<List<Map<String, dynamic>>> getAllPrompts() async {
    final db = await database;
    return await db.query('custom_prompts');
  }

  /// Naj√≠t prompt podle kategorie nebo tag≈Ø
  Future<Map<String, dynamic>?> findPromptByTags(List<String> taskTags) async {
    final db = await database;
    final prompts = await db.query('custom_prompts');

    // Pokusit se naj√≠t prompt podle tag≈Ø
    for (final prompt in prompts) {
      final promptTagsJson = prompt['tags'] as String;
      final promptTags = (promptTagsJson as String)
          .replaceAll('[', '')
          .replaceAll(']', '')
          .replaceAll('"', '')
          .split(',')
          .map((t) => t.trim().toLowerCase())
          .toList();

      // Zkontrolovat, jestli se nƒõkter√Ω tag shoduje
      for (final tag in taskTags) {
        if (promptTags.contains(tag.toLowerCase())) {
          return prompt;
        }
      }
    }

    return null; // ≈Ω√°dn√Ω prompt nenalezen
  }

  /// Migrovat star√© √∫koly - p≈ôeparsovat tagy a odstranit je z textu
  Future<void> migrateOldTasks() async {
    final db = await database;

    // Naƒç√≠st v≈°echny √∫koly jako raw data
    final maps = await db.query('todos');

    for (final map in maps) {
      final taskText = map['task'] as String;

      // Zkontrolovat, jestli text obsahuje tagy
      if (taskText.contains('*')) {
        // P≈ôeparsovat pomoc√≠ TagParser
        final tagRegex = RegExp(r'\*([^*]+)\*');
        final cleanText = taskText.replaceAll(tagRegex, '').trim();

        // Pokud se text zmƒõnil, aktualizovat v datab√°zi
        if (cleanText != taskText) {
          await db.update(
            'todos',
            {'task': cleanText},
            where: 'id = ?',
            whereArgs: [map['id']],
          );
        }
      }
    }
  }

  // ==================== TAG DEFINITIONS CRUD ====================

  /// Z√≠skat v≈°echny definice tag≈Ø
  Future<List<Map<String, dynamic>>> getAllTagDefinitions() async {
    final db = await database;
    return await db.query('tag_definitions', orderBy: 'tag_type, sort_order');
  }

  /// Z√≠skat pouze povolen√© definice tag≈Ø
  Future<List<Map<String, dynamic>>> getEnabledTagDefinitions() async {
    final db = await database;
    return await db.query(
      'tag_definitions',
      where: 'enabled = ?',
      whereArgs: [1],
      orderBy: 'tag_type, sort_order',
    );
  }

  /// Z√≠skat definice tag≈Ø podle typu
  Future<List<Map<String, dynamic>>> getTagDefinitionsByType(
      String tagType) async {
    final db = await database;
    return await db.query(
      'tag_definitions',
      where: 'tag_type = ? AND enabled = ?',
      whereArgs: [tagType, 1],
      orderBy: 'sort_order',
    );
  }

  /// Naj√≠t definici tagu podle n√°zvu
  Future<Map<String, dynamic>?> getTagDefinitionByName(String tagName) async {
    final db = await database;
    final results = await db.query(
      'tag_definitions',
      where: 'tag_name = ?',
      whereArgs: [tagName.toLowerCase()],
      limit: 1,
    );

    return results.isNotEmpty ? results.first : null;
  }

  /// P≈ôidat novou definici tagu
  Future<int> insertTagDefinition(Map<String, dynamic> tagDef) async {
    final db = await database;
    return await db.insert('tag_definitions', tagDef);
  }

  /// Aktualizovat definici tagu
  Future<int> updateTagDefinition(int id, Map<String, dynamic> tagDef) async {
    final db = await database;
    return await db.update(
      'tag_definitions',
      tagDef,
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  /// Smazat definici tagu
  Future<int> deleteTagDefinition(int id) async {
    final db = await database;
    return await db.delete(
      'tag_definitions',
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  /// Zapnout/vypnout tag
  Future<int> toggleTagDefinition(int id, bool enabled) async {
    final db = await database;
    return await db.update(
      'tag_definitions',
      {'enabled': enabled ? 1 : 0},
      where: 'id = ?',
      whereArgs: [id],
    );
  }
}
