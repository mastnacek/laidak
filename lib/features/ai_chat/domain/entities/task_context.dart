import '../../../todo_list/domain/entities/todo.dart';
import '../../../ai_split/domain/entities/subtask.dart';
import '../../../pomodoro/domain/entities/pomodoro_session.dart';

/// Kontext √∫kolu pro AI chat
///
/// Obsahuje v≈°echna relevantn√≠ data pro AI asistenta:
/// - Hlavn√≠ √∫kol (task, priority, deadline, tags)
/// - Pod√∫koly (subtasks) vƒçetnƒõ completion stavu
/// - Pomodoro sessions (ƒças str√°ven√Ω na √∫kolu)
/// - AI metadata (recommendations, deadline analysis)
class TaskContext {
  /// Hlavn√≠ TODO √∫kol
  final Todo todo;

  /// Pod√∫koly (pokud existuj√≠)
  final List<Subtask> subtasks;

  /// Pomodoro sessions (historie pr√°ce na √∫kolu)
  final List<PomodoroSession> pomodoroSessions;

  const TaskContext({
    required this.todo,
    this.subtasks = const [],
    this.pomodoroSessions = const [],
  });

  /// Vytvo≈ô system prompt pro AI
  ///
  /// Toto je prvn√≠ message v konverzaci, kter√° d√°v√° AI kontext.
  String toSystemPrompt() {
    final buffer = StringBuffer();

    buffer.writeln('Jsi AI asistent pom√°haj√≠c√≠ s TODO √∫kolem.');
    buffer.writeln('');
    buffer.writeln('KONTEXT √öKOLU:');
    buffer.writeln('N√°zev: ${todo.task}');

    if (todo.priority != null) {
      buffer.writeln('Priorita: ${todo.priority!.toUpperCase()}');
    }

    if (todo.dueDate != null) {
      buffer.writeln('Deadline: ${_formatDate(todo.dueDate!)}');
    }

    if (todo.tags.isNotEmpty) {
      buffer.writeln('Tagy: ${todo.tags.join(", ")}');
    }

    buffer.writeln('Stav: ${todo.isCompleted ? "‚úÖ Hotovo" : "‚è≥ Aktivn√≠"}');

    // Pod√∫koly
    if (subtasks.isNotEmpty) {
      final completed = subtasks.where((s) => s.completed).length;
      buffer.writeln('');
      buffer.writeln('POD√öKOLY ($completed/${subtasks.length} hotovo):');
      for (var subtask in subtasks) {
        buffer.writeln('${subtask.completed ? "‚úÖ" : "‚òê"} ${subtask.subtaskNumber}. ${subtask.text}');
      }
    }

    // Pomodoro sessions
    if (pomodoroSessions.isNotEmpty) {
      final totalMinutes = pomodoroSessions.fold<int>(
        0,
        (sum, session) => sum + session.duration.inMinutes,
      );
      buffer.writeln('');
      buffer.writeln('HISTORIE PR√ÅCE:');
      buffer.writeln('üçÖ Pomodoro sessions: ${pomodoroSessions.length}x');
      buffer.writeln('‚è±Ô∏è Celkov√Ω ƒças: $totalMinutes minut');
    }

    // AI metadata
    if (todo.aiRecommendations != null && todo.aiRecommendations!.isNotEmpty) {
      buffer.writeln('');
      buffer.writeln('AI DOPORUƒåEN√ç:');
      buffer.writeln(todo.aiRecommendations);
    }

    if (todo.aiDeadlineAnalysis != null && todo.aiDeadlineAnalysis!.isNotEmpty) {
      buffer.writeln('');
      buffer.writeln('AI ANAL√ùZA TERM√çNU:');
      buffer.writeln(todo.aiDeadlineAnalysis);
    }

    buffer.writeln('');
    buffer.writeln('---');
    buffer.writeln('Tvoje role: Pom√°hej u≈æivateli s t√≠mto √∫kolem. Buƒè konstruktivn√≠, konkr√©tn√≠ a praktick√Ω.');
    buffer.writeln('');
    buffer.writeln('# FORMATTING RULES');
    buffer.writeln('Form√°tuj odpovƒõdi pomoc√≠ Markdown pro lep≈°√≠ ƒçitelnost:');
    buffer.writeln('- Pou≈æ√≠vej **tuƒçn√Ω text** pro d≈Øle≈æit√° slova, ƒç√≠sla √∫kol≈Ø, deadlines');
    buffer.writeln('- Pou≈æ√≠vej *kurz√≠vu* pro zd≈Øraznƒõn√≠');
    buffer.writeln('- Pou≈æ√≠vej ƒç√≠slovan√© seznamy (1., 2., 3.) pro kroky nebo postupy');
    buffer.writeln('- Pou≈æ√≠vej odr√°≈æky (-, ‚Ä¢) pro seznamy');
    buffer.writeln('- Pou≈æ√≠vej nadpisy (# Nadpis) pro strukturu del≈°√≠ch odpovƒõd√≠');

    return buffer.toString();
  }

  /// Format date to Czech format
  String _formatDate(DateTime date) {
    return '${date.day}.${date.month}.${date.year}';
  }

  /// Poƒçet dokonƒçen√Ωch pod√∫kol≈Ø
  int get completedSubtasks => subtasks.where((s) => s.completed).length;

  /// Celkov√Ω ƒças str√°ven√Ω na √∫kolu (v minut√°ch)
  int get totalPomodoroMinutes => pomodoroSessions.fold<int>(
    0,
    (sum, session) => sum + session.duration.inMinutes,
  );
}
