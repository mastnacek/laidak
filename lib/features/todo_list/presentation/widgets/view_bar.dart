import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../../../core/theme/theme_colors.dart';
import '../../../../core/widgets/info_dialog.dart';
import '../../domain/enums/view_mode.dart';
import '../bloc/todo_list_bloc.dart';
import '../bloc/todo_list_event.dart';
import '../bloc/todo_list_state.dart';

/// ViewBar - Kompaktn√≠ view mode selector s visibility toggle
///
/// Specifikace:
/// - Height: 56dp
/// - Icon size: 20-22dp (men≈°√≠ ne≈æ d≈ô√≠ve)
/// - Eye icon: 24dp (vƒõt≈°√≠ ne≈æ ostatn√≠)
/// - Touch target: 44x44dp
/// - Spacing: 6-8dp
class ViewBar extends StatelessWidget {
  const ViewBar({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Semantics(
      label: 'Panel pro v√Ωbƒõr zobrazen√≠ √∫kol≈Ø',
      container: true,
      child: Container(
        height: 56,
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: theme.appColors.bgAlt,
          border: Border(
            top: BorderSide(
              color: theme.appColors.base3,
              width: 1,
            ),
          ),
        ),
        child: SafeArea(
          top: false,
          child: Row(
            children: [
            // View mode buttons (kompaktn√≠ ikony)
            Expanded(
              child: BlocBuilder<TodoListBloc, TodoListState>(
                builder: (context, state) {
                  final currentViewMode =
                      state is TodoListLoaded ? state.viewMode : ViewMode.all;

                  return Row(
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: ViewMode.values.map((mode) {
                      final isSelected = currentViewMode == mode;
                      return Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 4),
                        child: InkWell(
                          onTap: () {
                            final bloc = context.read<TodoListBloc>();
                            // One-click toggle: klik na selected = All mode
                            if (isSelected && mode != ViewMode.all) {
                              bloc.add(const ChangeViewModeEvent(ViewMode.all));
                            } else {
                              bloc.add(ChangeViewModeEvent(mode));
                            }
                          },
                          onLongPress: () {
                            showDialog(
                              context: context,
                              builder: (context) => InfoDialog(
                                title: mode.label,
                                icon: mode.icon,
                                iconColor: theme.appColors.yellow,
                                description: _getViewModeDescription(mode),
                                examples: _getViewModeExamples(mode),
                                tip: 'Klikni na ikonku pro aktivaci tohoto pohledu. Klikni znovu pro vr√°cen√≠ na "V≈°echny".',
                              ),
                            );
                          },
                          borderRadius: BorderRadius.circular(22),
                          child: Container(
                            constraints: const BoxConstraints(
                              minWidth: 44,
                              minHeight: 44,
                            ),
                            alignment: Alignment.center,
                            child: Icon(
                              mode.icon,
                              size: 20,
                              color: isSelected
                                  ? theme.appColors.yellow
                                  : theme.appColors.base5,
                            ),
                          ),
                        ),
                      );
                    }).toList(),
                  );
                },
              ),
            ),

            // Divider p≈ôed visibility toggle
            Container(
              width: 1,
              height: 24,
              margin: const EdgeInsets.symmetric(horizontal: 8),
              color: theme.appColors.base3,
            ),

            // Visibility toggle (v√Ωraznƒõj≈°√≠ ikona 24dp)
            BlocBuilder<TodoListBloc, TodoListState>(
              builder: (context, state) {
                final showCompleted =
                    state is TodoListLoaded ? state.showCompleted : false;

                return IconButton(
                  icon: Icon(
                    showCompleted ? Icons.visibility : Icons.visibility_off,
                    size: 24, // Vƒõt≈°√≠ ne≈æ ostatn√≠ ikony!
                  ),
                  tooltip: showCompleted
                      ? 'Skr√Ωt hotov√© √∫koly'
                      : 'Zobrazit hotov√© √∫koly',
                  color: showCompleted
                      ? theme.appColors.green
                      : theme.appColors.base5,
                  constraints: const BoxConstraints(
                    minWidth: 44,
                    minHeight: 44,
                  ),
                  padding: EdgeInsets.zero,
                  onPressed: () {
                    context
                        .read<TodoListBloc>()
                        .add(const ToggleShowCompletedEvent());
                  },
                );
              },
            ),
          ],
          ),
        ),
      ),
    );
  }

  /// Z√≠skat popis pro ViewMode
  String _getViewModeDescription(ViewMode mode) {
    return switch (mode) {
      ViewMode.all =>
        'Zobraz√≠ v≈°echny √∫koly bez filtru. Toto je v√Ωchoz√≠ pohled, kde vid√≠≈° kompletn√≠ seznam v≈°ech aktivn√≠ch i dokonƒçen√Ωch √∫kol≈Ø.',
      ViewMode.today =>
        'Zobraz√≠ pouze √∫koly s term√≠nem dnes. Ide√°ln√≠ pro denn√≠ pl√°nov√°n√≠ - vid√≠≈° co mus√≠≈° stihnout je≈°tƒõ dnes.',
      ViewMode.week =>
        'Zobraz√≠ √∫koly s term√≠nem v p≈ô√≠≈°t√≠ch 7 dnech. Pom≈Ø≈æe ti pl√°novat t√Ωden dop≈ôedu a rozlo≈æit pr√°ci.',
      ViewMode.upcoming =>
        'Zobraz√≠ v≈°echny √∫koly s term√≠nem v budoucnosti (od z√≠t≈ôka d√°l). Pro dlouhodob√© pl√°nov√°n√≠.',
      ViewMode.overdue =>
        'Zobraz√≠ √∫koly po term√≠nu - ty, kter√© jsi nestihl vƒças. Prioritizuj je jako prvn√≠!',
    };
  }

  /// Z√≠skat p≈ô√≠klady pou≈æit√≠ pro ViewMode
  List<String> _getViewModeExamples(ViewMode mode) {
    return switch (mode) {
      ViewMode.all => [
          'üìã V≈°echny aktivn√≠ √∫koly',
          'üìã Dokonƒçen√© √∫koly',
          'üìã Bez jak√©hokoliv filtru',
        ],
      ViewMode.today => [
          'üìÖ Term√≠n: Dnes 14:00',
          'üìÖ Dnes do konce dne',
          'üìÖ Urgentn√≠ √∫koly na dnes',
        ],
      ViewMode.week => [
          'üóìÔ∏è Pondƒõl√≠ - Prezentace',
          'üóìÔ∏è St≈ôeda - Code review',
          'üóìÔ∏è P√°tek - Team meeting',
        ],
      ViewMode.upcoming => [
          'üìÜ P≈ô√≠≈°t√≠ t√Ωden - Projekt X',
          'üìÜ Konec mƒõs√≠ce - Report',
          'üìÜ Budouc√≠ pl√°nov√°n√≠',
        ],
      ViewMode.overdue => [
          '‚ö†Ô∏è Vƒçera mƒõlo b√Ωt hotovo!',
          '‚ö†Ô∏è 3 dny po term√≠nu',
          '‚ö†Ô∏è Nesplnƒõn√© deadlines',
        ],
    };
  }
}
