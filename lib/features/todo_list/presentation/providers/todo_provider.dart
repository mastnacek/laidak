import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

import '../../../../core/providers/repository_providers.dart';
import '../../../../core/utils/app_logger.dart';
import '../../../settings/presentation/providers/settings_provider.dart';
import '../../domain/entities/todo.dart';
import '../../domain/enums/view_mode.dart';
import '../../domain/enums/sort_mode.dart';
import '../../domain/enums/completion_filter.dart';
import '../../../ai_brief/domain/entities/brief_response.dart';
import '../../../ai_brief/domain/entities/brief_config.dart';
import '../../../settings/domain/models/custom_agenda_view.dart';
import '../bloc/todo_list_state.dart';

part 'todo_provider.g.dart';

/// Riverpod Notifier pro spr√°vu Todo List
///
/// Nahrazuje p≈Øvodn√≠ TodoListBloc
/// Zodpovƒõdnosti:
/// - Naƒç√≠t√°n√≠ todos z datab√°ze
/// - P≈ôid√°v√°n√≠, aktualizace, maz√°n√≠ todos
/// - Filtrov√°n√≠ zobrazen√≠ (hotov√©/nehotov√©)
/// - Expandov√°n√≠/kolapsov√°n√≠ √∫kol≈Ø
/// - Generov√°n√≠ AI Brief (s 1h cache)
/// - Auto-export markdown (pokud zapnut√Ω v settings)
@riverpod
class TodoList extends _$TodoList {
  // Cache pro AI Brief (1h validity)
  BriefResponse? _aiBriefCache;

  @override
  Future<TodoListState> build() async {
    // Naƒç√≠st initial data
    try {
      final todos = await ref.read(todoRepositoryProvider).getTodos();
      return TodoListLoaded(allTodos: todos);
    } catch (e) {
      AppLogger.error('Chyba p≈ôi naƒç√≠t√°n√≠ todos: $e');
      return TodoListError(e.toString());
    }
  }

  /// Reload todos z datab√°ze
  Future<void> loadTodos() async {
    // Zachovat V≈†ECHNY d≈Øle≈æit√© parametry z p≈ôedchoz√≠ho stavu
    final previousState = state.value;
    final expandedTodoId = previousState is TodoListLoaded
        ? previousState.expandedTodoId
        : null;
    final viewMode = previousState is TodoListLoaded
        ? previousState.viewMode
        : ViewMode.all;
    final searchQuery = previousState is TodoListLoaded
        ? previousState.searchQuery
        : '';
    final sortMode = previousState is TodoListLoaded
        ? previousState.sortMode
        : null;
    final sortDirection = previousState is TodoListLoaded
        ? previousState.sortDirection
        : SortDirection.desc;
    final currentCustomView = previousState is TodoListLoaded
        ? previousState.currentCustomView
        : null;
    final aiBriefData = previousState is TodoListLoaded
        ? previousState.aiBriefData
        : null;
    final completionFilter = previousState is TodoListLoaded
        ? previousState.completionFilter
        : CompletionFilter.incomplete;
    final briefConfig = previousState is TodoListLoaded
        ? previousState.briefConfig
        : const BriefConfig();
    final prepopulatedText = previousState is TodoListLoaded
        ? previousState.prepopulatedText
        : null;

    try {
      final todos = await ref.read(todoRepositoryProvider).getTodos();

      state = AsyncValue.data(TodoListLoaded(
        allTodos: todos,
        expandedTodoId: expandedTodoId,
        viewMode: viewMode,
        searchQuery: searchQuery,
        sortMode: sortMode,
        sortDirection: sortDirection,
        currentCustomView: currentCustomView,
        aiBriefData: aiBriefData,
        completionFilter: completionFilter,
        briefConfig: briefConfig,
        prepopulatedText: prepopulatedText,
      ));

      AppLogger.debug('‚úÖ Todos naƒçteny: ${todos.length} items');
    } catch (e) {
      AppLogger.error('Chyba p≈ôi naƒç√≠t√°n√≠ todos: $e');
      state = AsyncValue.data(TodoListError(e.toString()));
    }
  }

  /// P≈ôidat nov√Ω todo
  Future<void> addTodo({
    required String taskText,
    String? priority,
    DateTime? dueDate,
    List<String> tags = const [],
  }) async {
    try {
      final newTodo = Todo(
        id: 0, // DB auto-increment
        taskText: taskText,
        isCompleted: false,
        priority: priority,
        dueDate: dueDate,
        tags: tags,
        createdAt: DateTime.now(),
      );

      await ref.read(todoRepositoryProvider).addTodo(newTodo);

      // Auto-export markdown pokud je zapnut√Ω
      await _autoExportIfEnabled();

      // Reload todos
      await loadTodos();

      AppLogger.info('‚úÖ Todo p≈ôid√°n: $taskText');
    } catch (e) {
      AppLogger.error('Chyba p≈ôi p≈ôid√°v√°n√≠ todo: $e');
      state = AsyncValue.data(TodoListError(e.toString()));
    }
  }

  /// Aktualizovat existuj√≠c√≠ todo
  Future<void> updateTodo(Todo todo) async {
    try {
      await ref.read(todoRepositoryProvider).updateTodo(todo);

      // Auto-export markdown pokud je zapnut√Ω
      await _autoExportIfEnabled();

      // Reload todos
      await loadTodos();

      AppLogger.info('‚úÖ Todo aktualizov√°n: ${todo.taskText}');
    } catch (e) {
      AppLogger.error('Chyba p≈ôi aktualizaci todo: $e');
      state = AsyncValue.data(TodoListError(e.toString()));
    }
  }

  /// Smazat todo podle ID
  Future<void> deleteTodo(int id) async {
    try {
      await ref.read(todoRepositoryProvider).deleteTodo(id);

      // Auto-export markdown pokud je zapnut√Ω
      await _autoExportIfEnabled();

      // Reload todos
      await loadTodos();

      AppLogger.info('‚úÖ Todo smaz√°n: $id');
    } catch (e) {
      AppLogger.error('Chyba p≈ôi maz√°n√≠ todo: $e');
      state = AsyncValue.data(TodoListError(e.toString()));
    }
  }

  /// P≈ôepnout stav todo (hotovo/nehotovo)
  Future<void> toggleTodo({required int id, required bool isCompleted}) async {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    try {
      // Naj√≠t todo
      final todo = currentState.allTodos.firstWhere((t) => t.id == id);

      // Aktualizovat v datab√°zi
      await ref.read(todoRepositoryProvider).updateTodo(
        todo.copyWith(
          isCompleted: isCompleted,
          completedAt: isCompleted ? DateTime.now() : null,
        ),
      );

      // Auto-export markdown pokud je zapnut√Ω
      await _autoExportIfEnabled();

      // Reload todos
      await loadTodos();

      AppLogger.info('‚úÖ Todo toggled: $id ‚Üí $isCompleted');
    } catch (e) {
      AppLogger.error('Chyba p≈ôi toggle todo: $e');
      state = AsyncValue.data(TodoListError(e.toString()));
    }
  }

  /// P≈ôepnout zobrazen√≠ hotov√Ωch √∫kol≈Ø
  void toggleShowCompleted() {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    // Cycle: incomplete ‚Üí all ‚Üí completed ‚Üí incomplete
    final newFilter = switch (currentState.completionFilter) {
      CompletionFilter.incomplete => CompletionFilter.all,
      CompletionFilter.all => CompletionFilter.completed,
      CompletionFilter.completed => CompletionFilter.incomplete,
    };

    state = AsyncValue.data(currentState.copyWith(completionFilter: newFilter));
    AppLogger.debug('üîÑ Completion filter zmƒõnƒõn: $newFilter');
  }

  /// Expandovat/kolapsovat √∫kol podle ID
  void toggleExpandTodo(int? todoId) {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    // Pokud kliknuto na stejn√Ω todo ‚Üí collapse
    // Pokud kliknuto na jin√Ω todo ‚Üí expand ten nov√Ω
    final newExpandedId = currentState.expandedTodoId == todoId ? null : todoId;

    state = AsyncValue.data(currentState.copyWith(
      expandedTodoId: newExpandedId,
      clearExpandedTodoId: newExpandedId == null,
    ));

    AppLogger.debug('üîÑ Expanded todo: $newExpandedId');
  }

  // ==================== SEARCH / FILTER / SORT ====================

  /// Vyhledat √∫koly podle query
  void searchTodos(String query) {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    state = AsyncValue.data(currentState.copyWith(searchQuery: query));
    AppLogger.debug('üîç Search query: "$query"');
  }

  /// Vymazat vyhled√°v√°n√≠
  void clearSearch() {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    state = AsyncValue.data(currentState.copyWith(searchQuery: ''));
    AppLogger.debug('üîç Search cleared');
  }

  /// Zmƒõnit view mode (agenda kategorie)
  void changeViewMode(ViewMode viewMode) {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    state = AsyncValue.data(currentState.copyWith(
      viewMode: viewMode,
      clearCustomView: true, // Clear custom view p≈ôi p≈ôepnut√≠ na built-in
    ));

    AppLogger.debug('üîÑ View mode zmƒõnƒõn: $viewMode');
  }

  /// Zmƒõnit na custom view (tag-based filtr)
  void changeToCustomView(CustomAgendaView customView) {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    state = AsyncValue.data(currentState.copyWith(
      viewMode: ViewMode.custom,
      currentCustomView: customView,
    ));

    AppLogger.debug('üîÑ Custom view: ${customView.name}');
  }

  /// Se≈ôadit √∫koly podle krit√©ria
  void sortTodos(SortMode sortMode, SortDirection direction) {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    state = AsyncValue.data(currentState.copyWith(
      sortMode: sortMode,
      sortDirection: direction,
    ));

    AppLogger.debug('üîÑ Sort: $sortMode $direction');
  }

  /// Vymazat sortov√°n√≠ (vr√°tit na default)
  void clearSort() {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    state = AsyncValue.data(currentState.copyWith(clearSortMode: true));
    AppLogger.debug('üîÑ Sort cleared (default: createdAt DESC)');
  }

  // ==================== AI BRIEF ====================

  /// Regenerovat AI Brief (ignorovat cache)
  Future<void> regenerateBrief() async {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    // Set loading state
    state = AsyncValue.data(currentState.copyWith(
      isGeneratingBrief: true,
      clearBriefError: true,
    ));

    try {
      // Z√≠skat AI Brief settings ze Settings provider
      final settingsState = await ref.read(settingsProvider.future);
      final apiKey = settingsState.openRouterApiKey;

      if (apiKey == null || apiKey.isEmpty) {
        throw Exception('OpenRouter API kl√≠ƒç nen√≠ nastaven');
      }

      // Generovat AI Brief
      final briefResponse = await ref.read(aiBriefRepositoryProvider).generateBrief(
        todos: currentState.allTodos,
        config: currentState.briefConfig,
      );

      // Update cache
      _aiBriefCache = briefResponse;

      // Update state
      state = AsyncValue.data(currentState.copyWith(
        aiBriefData: briefResponse,
        isGeneratingBrief: false,
      ));

      AppLogger.info('‚úÖ AI Brief vygenerov√°n');
    } catch (e) {
      AppLogger.error('Chyba p≈ôi generov√°n√≠ AI Brief: $e');
      state = AsyncValue.data(currentState.copyWith(
        isGeneratingBrief: false,
        briefError: e.toString(),
      ));
    }
  }

  /// Aktualizovat Brief konfiguraci (nastaven√≠)
  Future<void> updateBriefConfig(BriefConfig config) async {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    // Ulo≈æit config do DB
    await ref.read(briefSettingsServiceProvider).saveBriefConfig(config);

    // Update state
    state = AsyncValue.data(currentState.copyWith(briefConfig: config));

    AppLogger.info('‚úÖ Brief config aktualizov√°n');
  }

  // ==================== INPUT BAR ====================

  /// Event pro p≈ôedvyplnƒõn√≠ input baru textem (nap≈ô. z kalend√°≈ôe)
  void prepopulateInput(String text) {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    state = AsyncValue.data(currentState.copyWith(prepopulatedText: text));
    AppLogger.debug('üìù Input prepopulated: "$text"');
  }

  /// Event pro vyƒçi≈°tƒõn√≠ p≈ôedvyplnƒõn√©ho textu
  void clearPrepopulatedText() {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    state = AsyncValue.data(currentState.copyWith(clearPrepopulatedText: true));
    AppLogger.debug('üìù Prepopulated text cleared');
  }

  // ==================== RECURRENCE (TODOIST MODEL) ====================

  /// User potvrdil pokraƒçov√°n√≠ v opakov√°n√≠
  /// Posune due_date na dal≈°√≠ term√≠n podle recurrence rule.
  Future<void> continueRecurrence(int todoId, DateTime nextDate) async {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    try {
      // Set generating state
      final newGeneratingMap = Map<int, bool>.from(currentState.generatingOccurrences);
      newGeneratingMap[todoId] = true;
      state = AsyncValue.data(currentState.copyWith(generatingOccurrences: newGeneratingMap));

      // Naj√≠t todo
      final todo = currentState.allTodos.firstWhere((t) => t.id == todoId);

      // Aktualizovat due_date
      await ref.read(todoRepositoryProvider).updateTodo(
        todo.copyWith(dueDate: nextDate),
      );

      // Clear generating state
      newGeneratingMap[todoId] = false;

      // Reload todos
      await loadTodos();

      AppLogger.info('‚úÖ Recurrence pokraƒçuje: $todoId ‚Üí $nextDate');
    } catch (e) {
      AppLogger.error('Chyba p≈ôi pokraƒçov√°n√≠ recurrence: $e');
      state = AsyncValue.data(TodoListError(e.toString()));
    }
  }

  /// User ukonƒçil opakov√°n√≠
  /// Sma≈æe RecurrenceRule a oznaƒç√≠ TODO jako completed.
  Future<void> endRecurrence(int todoId) async {
    final currentState = state.value;
    if (currentState is! TodoListLoaded) return;

    try {
      // Set generating state
      final newGeneratingMap = Map<int, bool>.from(currentState.generatingOccurrences);
      newGeneratingMap[todoId] = true;
      state = AsyncValue.data(currentState.copyWith(generatingOccurrences: newGeneratingMap));

      // Naj√≠t todo
      final todo = currentState.allTodos.firstWhere((t) => t.id == todoId);

      // Smazat recurrence rule + mark as completed
      await ref.read(todoRepositoryProvider).updateTodo(
        todo.copyWith(
          recurrence: null,
          isCompleted: true,
          completedAt: DateTime.now(),
        ),
      );

      // Clear generating state
      newGeneratingMap[todoId] = false;

      // Reload todos
      await loadTodos();

      AppLogger.info('‚úÖ Recurrence ukonƒçena: $todoId');
    } catch (e) {
      AppLogger.error('Chyba p≈ôi ukonƒçov√°n√≠ recurrence: $e');
      state = AsyncValue.data(TodoListError(e.toString()));
    }
  }

  // ==================== PRIVATE HELPERS ====================

  /// Auto-export markdown pokud je zapnut√Ω v settings
  Future<void> _autoExportIfEnabled() async {
    try {
      final settingsState = await ref.read(settingsProvider.future);
      final exportConfig = settingsState.exportConfig;

      if (exportConfig.autoExportOnSave && exportConfig.exportTodos) {
        await ref.read(markdownExportRepositoryProvider).exportTodos(
          format: exportConfig.format,
        );
        AppLogger.debug('‚úÖ Auto-export markdown dokonƒçen');
      }
    } catch (e) {
      AppLogger.error('Chyba p≈ôi auto-exportu markdown: $e');
      // Neblokovat hlavn√≠ operaci p≈ôi chybƒõ exportu
    }
  }
}

/// Helper provider: z√≠skat aktu√°ln√≠ displayedTodos (pro UI)
@riverpod
List<Todo> displayedTodos(DisplayedTodosRef ref) {
  final todoListAsync = ref.watch(todoListProvider);

  return todoListAsync.maybeWhen(
    data: (state) {
      if (state is TodoListLoaded) {
        return state.displayedTodos;
      }
      return [];
    },
    orElse: () => [],
  );
}

/// Helper provider: z√≠skat expanded todo ID
@riverpod
int? expandedTodoId(ExpandedTodoIdRef ref) {
  final todoListAsync = ref.watch(todoListProvider);

  return todoListAsync.maybeWhen(
    data: (state) {
      if (state is TodoListLoaded) {
        return state.expandedTodoId;
      }
      return null;
    },
    orElse: () => null,
  );
}

/// Helper provider: z√≠skat current view mode
@riverpod
ViewMode currentViewMode(CurrentViewModeRef ref) {
  final todoListAsync = ref.watch(todoListProvider);

  return todoListAsync.maybeWhen(
    data: (state) {
      if (state is TodoListLoaded) {
        return state.viewMode;
      }
      return ViewMode.all;
    },
    orElse: () => ViewMode.all,
  );
}
