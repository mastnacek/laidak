import 'package:equatable/equatable.dart';

/// Model pro AI tag suggestion
///
/// Reprezentuje jeden navr≈æen√Ω tag od AI, vƒçetnƒõ informace zda jde
/// o existuj√≠c√≠ tag z datab√°ze nebo nov√Ω n√°vrh.
class TagSuggestion extends Equatable {
  /// N√°zev tagu (nap≈ô. "pr√°ce", "nakup", "dnes")
  final String tagName;

  /// True = existuj√≠c√≠ tag z datab√°ze, False = nov√Ω n√°vrh od AI
  final bool isExisting;

  /// Confidence score 0.0-1.0 (jak moc si je AI jist√°)
  final double confidence;

  /// Barva tagu z tag_definitions (hex string, nap≈ô. "#ff0000")
  /// Pouze pro existuj√≠c√≠ tagy, null pro nov√© n√°vrhy
  final String? color;

  /// Emoji z tag_definitions (nap≈ô. "üî¥", "‚è∞")
  /// Pouze pro existuj√≠c√≠ tagy, null pro nov√© n√°vrhy
  final String? emoji;

  const TagSuggestion({
    required this.tagName,
    required this.isExisting,
    required this.confidence,
    this.color,
    this.emoji,
  });

  /// Factory constructor z JSON response od OpenRouter API
  factory TagSuggestion.fromJson(Map<String, dynamic> json) {
    return TagSuggestion(
      tagName: json['tag'] as String,
      isExisting: json['existing'] as bool,
      confidence: (json['confidence'] as num).toDouble(),
    );
  }

  /// Konverze na JSON (pro debugging/logging)
  Map<String, dynamic> toJson() {
    return {
      'tag': tagName,
      'existing': isExisting,
      'confidence': confidence,
    };
  }

  @override
  List<Object?> get props => [tagName, isExisting, confidence, color, emoji];

  @override
  String toString() {
    return 'TagSuggestion(tag: $tagName, existing: $isExisting, confidence: $confidence)';
  }
}
