import 'dart:convert';
import 'package:http/http.dart' as http;
import '../../../../core/services/database_helper.dart';
import '../../../../core/utils/app_logger.dart';
import '../../domain/models/tag_suggestion.dart';

/// Service pro AI-powered tag suggestions
///
/// Vyu≈æ√≠v√° OpenRouter API (Claude 3.5 Haiku) pro generov√°n√≠ relevantn√≠ch tag≈Ø
/// p≈ôi psan√≠ √∫kol≈Ø. Preferuje existuj√≠c√≠ custom tagy z datab√°ze.
class TagSuggestionService {
  static const String _apiUrl = 'https://openrouter.ai/api/v1/chat/completions';
  final DatabaseHelper _db;
  final String _apiKey;

  TagSuggestionService(this._db, this._apiKey);

  /// Navrhne 1-3 tagy pro dan√Ω task text
  ///
  /// - Minim√°ln√≠ d√©lka: 15 znak≈Ø (cca 3 slova)
  /// - Vrac√≠ pr√°zdn√Ω seznam pokud text je kr√°tk√Ω nebo p≈ôi chybƒõ
  /// - Prioritizuje existuj√≠c√≠ tagy (isExisting: true)
  /// - Response do 5s (timeout)
  /// - [usedTags]: Tagy u≈æ pou≈æit√© v textu (nebudou navr≈æeny)
  Future<List<TagSuggestion>> suggestTags(
    String taskText, {
    List<String> usedTags = const [],
  }) async {
    // ‚úÖ Fail Fast: validace
    if (taskText.trim().length < 15) {
      AppLogger.debug(
          '‚è≠Ô∏è TagSuggestionService: Text p≈ô√≠li≈° kr√°tk√Ω (<15 znak≈Ø), skipping');
      return [];
    }

    if (_apiKey.isEmpty) {
      AppLogger.error('‚ùå TagSuggestionService: API kl√≠ƒç nen√≠ nastaven');
      return [];
    }

    try {
      // 1. Naƒç√≠st existuj√≠c√≠ custom tagy z DB
      final allExistingTags = await _loadExistingTags();
      AppLogger.debug(
          'üìã TagSuggestionService: Naƒçteno ${allExistingTags.length} existuj√≠c√≠ch tag≈Ø');

      // 2. Programovƒõ odebrat ji≈æ pou≈æit√© tagy ze seznamu (P≈òED AI call)
      final availableTags = allExistingTags
          .where((tag) => !usedTags.contains(tag))
          .toList();

      if (usedTags.isNotEmpty) {
        AppLogger.debug(
            'üè∑Ô∏è TagSuggestionService: Pou≈æit√© tagy (${usedTags.length}): $usedTags');
        AppLogger.debug(
            '‚úÇÔ∏è TagSuggestionService: Dostupn√© tagy po filtraci: ${availableTags.length}/${allExistingTags.length}');
      }

      // 3. Naƒç√≠st AI settings z DB
      final settings = await _db.getSettings();
      final model = settings['ai_tag_suggestions_model'] as String;
      final temperature = settings['ai_tag_suggestions_temperature'] as double;
      final maxTokens = settings['ai_tag_suggestions_max_tokens'] as int;
      final seed = settings['ai_tag_suggestions_seed'] as int?;
      final topP = settings['ai_tag_suggestions_top_p'] as double?;

      // 4. Sestavit system prompt POUZE s dostupn√Ωmi tagy (ji≈æ odfiltrovan√©)
      final systemPrompt = _buildSystemPrompt(availableTags);

      // 4. Zavolat OpenRouter Chat API s JSON mode
      AppLogger.debug('üöÄ TagSuggestionService: Vol√°m OpenRouter API...');
      final response = await http
          .post(
            Uri.parse(_apiUrl),
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer $_apiKey',
              'HTTP-Referer': 'https://github.com/your-repo',
            },
            body: jsonEncode({
              'model': model,
              'messages': [
                {
                  'role': 'system',
                  'content': systemPrompt,
                },
                {
                  'role': 'user',
                  'content': taskText.trim(),
                }
              ],
              'temperature': temperature,
              'max_tokens': maxTokens,
              if (seed != null) 'seed': seed,
              if (topP != null) 'top_p': topP,
              // JSON mode - KRITICK√â pro structured output
              'response_format': {
                'type': 'json_object',
              },
            }),
          )
          .timeout(
            const Duration(seconds: 5),
            onTimeout: () {
              AppLogger.error('‚è±Ô∏è TagSuggestionService: Timeout (5s)');
              throw Exception('API timeout after 5 seconds');
            },
          );

      // 5. Parse response
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final messageContent =
            data['choices'][0]['message']['content'] as String;

        AppLogger.debug(
            '‚úÖ TagSuggestionService: API response OK, parsing JSON...');

        // Parse JSON response
        final jsonResponse = jsonDecode(messageContent);
        final suggestionsJson = jsonResponse['suggestions'] as List<dynamic>;

        // Convert to TagSuggestion models
        final suggestions = suggestionsJson
            .map((json) => TagSuggestion.fromJson(json as Map<String, dynamic>))
            .toList();

        // 5.5. Obohacen√≠ o barvy z tag_definitions pro existuj√≠c√≠ tagy
        final tagDefinitions = await _loadTagDefinitions();
        final enrichedSuggestions = suggestions.map((suggestion) {
          if (suggestion.isExisting) {
            // Naj√≠t tag definition pro tento tag
            final definition = tagDefinitions[suggestion.tagName];
            if (definition != null) {
              return TagSuggestion(
                tagName: suggestion.tagName,
                isExisting: suggestion.isExisting,
                confidence: suggestion.confidence,
                color: definition['color'] as String?,
                emoji: definition['emoji'] as String?,
              );
            }
          }
          return suggestion;
        }).toList();

        // 6. Prioritizovat (existing first, confidence DESC)
        enrichedSuggestions.sort((a, b) {
          // Existuj√≠c√≠ tagy first
          if (a.isExisting && !b.isExisting) return -1;
          if (!a.isExisting && b.isExisting) return 1;
          // Pak podle confidence (DESC)
          return b.confidence.compareTo(a.confidence);
        });

        AppLogger.debug(
            'üéØ TagSuggestionService: Navr≈æeno ${enrichedSuggestions.length} tag≈Ø');
        return enrichedSuggestions;
      } else if (response.statusCode == 429) {
        // Rate limit exceeded
        AppLogger.error('üö´ TagSuggestionService: Rate limit (429)');
        AppLogger.error('Response: ${response.body}');
        return []; // Graceful degradation
      } else if (response.statusCode == 401) {
        // Unauthorized (invalid API key)
        AppLogger.error('üîí TagSuggestionService: Neplatn√Ω API kl√≠ƒç (401)');
        return [];
      } else {
        // Jin√© API errory
        AppLogger.error(
            '‚ùå TagSuggestionService: API error ${response.statusCode}');
        AppLogger.error('Response: ${response.body}');
        return []; // Graceful degradation
      }
    } catch (e, stackTrace) {
      AppLogger.error('‚ùå Exception v TagSuggestionService.suggestTags()',
          error: e, stackTrace: stackTrace);
      return []; // Graceful degradation - app funguje i bez suggestions
    }
  }

  /// Naƒçte v≈°echny existuj√≠c√≠ custom tag names z datab√°ze
  Future<List<String>> _loadExistingTags() async {
    try {
      final db = await _db.database;
      final results = await db.query(
        'tags',
        columns: ['tag_name'],
        orderBy: 'tag_name ASC',
      );

      return results.map((row) => row['tag_name'] as String).toList();
    } catch (e) {
      AppLogger.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ existuj√≠c√≠ch tag≈Ø', error: e);
      return [];
    }
  }

  /// Naƒçte tag definitions (barvy, emoji) z datab√°ze
  ///
  /// Returns: Map<tagName, {color, emoji}>
  Future<Map<String, Map<String, dynamic>>> _loadTagDefinitions() async {
    try {
      final db = await _db.database;
      final results = await db.query(
        'tag_definitions',
        columns: ['tag_name', 'color', 'emoji'],
        where: 'enabled = ?',
        whereArgs: [1],
      );

      // P≈ôev√©st na Map pro rychl√© vyhled√°v√°n√≠
      return Map.fromEntries(
        results.map((row) => MapEntry(
          row['tag_name'] as String,
          {
            'color': row['color'],
            'emoji': row['emoji'],
          },
        )),
      );
    } catch (e) {
      AppLogger.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ tag definitions', error: e);
      return {};
    }
  }

  /// Sestav√≠ system prompt s existuj√≠c√≠mi tagy
  String _buildSystemPrompt(List<String> existingTags) {
    final tagsString = existingTags.isEmpty
        ? '(≈æ√°dn√© custom tagy zat√≠m neexistuj√≠)'
        : existingTags.map((tag) => '- $tag').join('\n');

    return '''
Jsi asistent pro kategorizaci √∫kol≈Ø.

EXISTUJ√çC√ç CUSTOM TAGY (V≈ΩDY preferuj!):
$tagsString

PRAVIDLA:
1. Navrhni 1-3 nejvhodnƒõj≈°√≠ tagy pro √∫kol
2. V≈ΩDY preferuj existuj√≠c√≠ tagy pokud se hod√≠
3. Navrhni nov√Ω tag POUZE pokud ≈æ√°dn√Ω existuj√≠c√≠ nesed√≠
4. Nov√© tagy: lowercase, bez diakritiky, kr√°tk√© (max 15 znak≈Ø)
5. Confidence: 0.0-1.0 (jak moc si jsi jist√Ω)

RESPONSE FORMAT:
Odpov√≠dej POUZE validn√≠m JSON objektem ve form√°tu:

{
  "suggestions": [
    {"tag": "pr√°ce", "existing": true, "confidence": 0.95},
    {"tag": "dnes", "existing": true, "confidence": 0.8}
  ]
}

P≈ò√çKLAD:
User: "Koupit ml√©ko a chleba v Albertu"
Assistant: {"suggestions": [{"tag": "nakup", "existing": true, "confidence": 0.98}, {"tag": "dnes", "existing": true, "confidence": 0.7}]}

KRITICK√â: Odpov√≠dej POUZE JSON, ≈æ√°dn√Ω dal≈°√≠ text!
''';
  }
}
